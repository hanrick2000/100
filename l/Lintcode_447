lintcode 447 Search in a Big Sorted Array
 

Given a big sorted array with positive integers sorted by ascending order. The array is so big so that you can not get the length of the whole array directly, and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++). Find the first index of a target number. Your algorithm should be in O(log k), where k is the first index of the target number.

Return -1, if the number doesn't exist in the array. 

Example

Given [1, 3, 6, 9, 21, ...], and target = 3, return 1.

Given [1, 3, 6, 9, 21, ...], and target = 4, return -1.

int search(ArreaReader reader, int target) {
    int index = 1;
    int begin = 0;
    while (reader.get(index-1) != -1 && reader.get(index-1) < target) {
        begin = index-1;
        index = index*2;        
    }
    
    int end = index;
    
    while (begin < end) {
        int mid = begin + (end-begin)/2;
        if (reader.get(mid) == -1 || reader.get(mid) > target) {
            end = mid-1;
        } else {
            begin = mid;
        }
    }
    
    if (reader.get(begin) == target) return begin;
    
    return -1;
    
}
